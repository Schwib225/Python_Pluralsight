Exception handling
    Mechanism for interrupting normal program flow and continuing in surrounding context
    
    Key Concepts
    1. Raising an exception
    2. Handling an exception
    3. Unhandled exceptions
    4. Exception Objects

Exceptions and Control Flow

    # We will use the following module for these examples since the REPL isn't quite as easy to use in this case
    
    exceptional.py
    
        DIGIT_MAP = {
            'zero': '0',
            'one': '1',
            'two': '2',
            'three': '3',
            'four': '4',
            'five': '5',
            'six': '6',
            'seven': '7',
            'eight': '8',
            'nine': '9',
        }

        def convert(s):
            number = ''
            for token in s:
                number += DIGIT_MAP[token]
            x = int(number)
            return x
            
    # From the REPL
    
        from exceptional import convert
        convert("one three three seven".split())                # this works
        
        convert("around one grillion".split())                  # this throws a KeyError because 'around' isn't defined in our list

Handling Exceptions

    # Lets modify our function to use a try/except construct


        def convert(s):
            try:                                                # try-block
                number = ''                                     # raise exceptions
                for token in s:
                    number += DIGIT_MAP[token]
                x = int(number)
                print(f"Conversion succeeded! x = {x}")
            except KeyError:                                    # except-block
                print("Conversion failed!")
                x = -1                                          # handle exceptions for key error
            except TypeError                                    # except block
                print("Conversion failed!")
                x = -1                                          # handle exceptions for type error
            return x

    # The above will handle the following:
    
    from exceptional import convert
    convert("three four".split())                               # works as intended
    convert("eleventeen".split())                               # would normally throw a KeyError
    convert(512)                                                # this would normally throw a TypeError

    # Lets clean up the function since we have duplicate code for key and type errors, consider the following
    
         def convert(s):
            x = -1                                              # By pre-defining x to the fail value, when it is successful it will change automatically, if not, we only need to print the conversion failed message             try:                                                
                number = ''                                    
                for token in s:
                    number += DIGIT_MAP[token]
                x = int(number)
                print(f"Conversion succeeded! x = {x}")
            except (KeyError, TypeError):                       # Merge except blocks                              
                print("Conversion failed!")
            return x 
    # Test it out
    
    from exceptional import convert
    convert("two nine".split())                                 # should work as intended
    convert("elephant".split())                                 # should throw -1
    convert(451)                                                # should throw -1

Exceptions and Programming Errors

    IndentationError, SyntaxError, and NameErrors are all errors that are programmer errors and should be fixed in the code and not handled at runtime (should almost never be caught)

    # Normally you can't pass nothing within an exception block, so since we want to remove the print statements, then lets use the 'pass' statement so we don't receive an error like the ones above

    def convert(s):                                             # Use 'pass' to return the -1 value instead 
        x = -1
        try: 
            number = ''
            for token in s:
                number += DIGIT_MAP[token]
            x = int(number)
        except (KeyError, TypeError):
            pass
        return x 
        
    OR
    
    def convert(s):                                             # Just return different values based on what heppens instead of passing 
    """Convert a string to an integer."""
    try:                                                
        number = ''                                    
        for token in s:
            number += DIGIT_MAP[token]
        return int(number)
    except (KeyError, TypeError):                                               
        return -1


    Accessing Eception Objects
    
        import sys
        DIGIT_MAPT = ... 

        def convert(s): 
            try: 
                number = ''
                for token in s:
                    number += DIGIT_MAP[token]
                x = int(number)
            except (KeyError, TypeError) as e:              # Use as keyword to make it a variable
                print(f"Conversion error: {e!r}",           # Print error message
                      file=sys.stderr)                      # Use stderr to print
            return x 
            
            
        # Note if you use f"{expression!r}" the repr expression will be added into your string - this gives us more detail about the type of expression
        
        from exceptional import convert
        convert("fail".split())                             # this will tell you the key 'fail' has failed conversion

Re-raising Exceptions

    Error codes are easy to ignore (shouldn't be ignored), but checks are always required
    
    from math import log
    
    def string_log(s):
        v = convert(s)                                      # Call convert()
        return log(v)                                       # Compute natual log        
    
    from exceptional import string_log
    string_log("ouch!".split())                             # throws value error - since we forgot about a value error, we should just throw a general exception to catch other issues
    
    # So we aren't getting into unpythonic error codes, we can just re-raise the exception with our exception statement
    
    # ensure you have imported all proper modules (sys and from math import log)
    
    def convert(s):
    """Convert a string to an integer."""
    try:                                                
        number = ''                                    
        for token in s:
            number += DIGIT_MAP[token]
        return int(number)
    except (KeyError, TypeError) as e:                                               
        print(f"Coversion error: {e!r}",
              file=sys.stderr)
        raise                                                 # Once we get the stderr file, we can raise the exception again. see the following examples
        
        
    # Examples
    from exceptional import string_log
    string_log("two five".split())
    
    string_log("cat dog".split())                               # this will raise a key error but will print the conversion error message along the way
    
    string_log(8675309)                                         # this will raise a type error
    
    
Exceptions are Part of the API

    and                     # tests if both are true
    or                      # tests if either are true
    
    def sqrt(x):
        """ Compute square roots using the meoth of heron of Alexandria

        Args:
            x: The number for which the square root is to be computed.

        Returns:
            The square root of x.
        """

        guess = x
        i = 0
        while guess * guess != x and i < 20:
            guess = (guess + x / guess) / 2.0
            i += 1
        return guess

    def main():
            print(sqrt(9))
            print(sqrt(2))

    if __name__ == '__main__':
        main()

---

    # Now lets add another item to main and run again, we will get a new exception (ZeroDivision Error)

    def main():
            print(sqrt(9))
            print(sqrt(2))
            print(sqrt(-1))


    # There's 2 different way to deal with this - both require us to raise a Value error
    
Option 1 - add this under def sqrt try/except statment
    
    except ZeroDivisionError:
        raise ValueError()
        
Option 2 - since we already know it will fail with negative numbers we can do early detection 
    
    def sqrt(x):
        """ Compute square roots using the meoth of heron of Alexandria

        Args:
            x: The number for which the square root is to be computed.

        Returns:
            The square root of x.
        
        Raises:                                                     # Add to the documentation here 
            ValueError: If x is negative
        """
        
        if x < 0:
            raise ValueError(                                       # this value error will raise if we try and use a negative number
                    "Cannot compute square root of "
                    f"negative number {x}")

        guess = x
        i = 0
        while guess * guess != x and i < 20:
            guess = (guess + x / guess) / 2.0
            i += 1
        return guess

        def main():
            try:
                print(sqrt(9))
                print(sqrt(2))
                print(sqrt(-1))
            except ValueError as e:                                     # catch the valueError
                print(e, file=sys.stderr)                               # here the program will output the error gracefully 

            print("Program execution continues "
                    "normally here.")

Exceptions and Protocols

    Sequences should raise IndexError for out-of-bounds indexing
    Exceptions must be implemented and documented correctly
    Existing build-in exceptions are often the right ones to use
    
   Follow existing patterns - The more your code follows established patterns, the easier it will be for others to use 
   
   # Example, key value database
   
   def lookup(key):
        if not find_key(key):
            raise KeyError()                        # We would use this  because this is how a dictionary (dict) works
        return value(key)
   
    Common exception types
   
    IndexError - An integer index is out of range
        z = [1, 4, 2]
        z[4]                        # this throws an IndexError
   
    ValueError - An object is of the correct type but has an inappropriate value
        int("jim")                  # this throws a ValueError
        
    KeyError - A lookup in a mapping failed
        codes = dict(gb=44, us=1, no=47, fr=33, es=34)
        codes['de']                 # throws a keyError
    

Avoid Explicit Type checks

    Avoid Catching TypeErrors, if your code works with tuples, sets, or something else when that wasn't intended, that may not always be a bad thing

It's easier to ask forgiveness than for permission

    Prepare for failure - either Check all preconditions or Prepare for the consequences of not checking
        
        LBYL - Look before you leap
        EAFP - Easier to ask forgiveness than permission 
    
    
        # Examples 
        
        LBYL:
        
        import os
        
        p = '/path/to/datafile.dat'
        
        if os.path.exists(p):                       # Check that the file exists - if not print a helpful message
            process_file(p)                         # file could be deleted after check - thus a race condition exists
        else:
            print(f'No such file as {p}')


        EAFP - 'the more pythonic approach'
        
        p = '/path/to/datafile.dat'
        
        try:
            process_file(f)
        except OSError as e:                        # Handle OSError - covers file not found and dirs instead of files among other errors
            print(f'Error: {e}')

            EAFP is enabled by exceptions, without exceptions, error handling is interspersed in program flow - very messy
                Exceptions are not easily ignored
                Error codes are silent by default
                Exceptions plus EAFT makes it very hard for problems to be ignored 
            
            
Cleanup actions

    try:
        # try code
    finally:
        # executed no matter how the try block terminates
        
    # Example of how this can be implemented
    
    import os, sys
    
    def make_at(path, dir_name):
        original_path = os.getcwd()
        os.chdir(path)
        try:
            os.mkdir(dir_name)
        finally:
            os.chdir(original_path)
            
            
    Handle Exception and Cleanup
    
    import os, sys
    
    def make_at(path, dir_name):
        original_path = os.getcwd()
        os.chdir(path)
        try:
            os.mkdir(dir_name)
        except OSError as e:
            print(e, file=sys.stderr)
            raise
        finally:
            os.chdir(original_path)
            
    Errors should never pass silently, unless explicityly silenced

Platform-Specific Code

    Platform-specific Modules
    
        Microsoft - use the msvcrt module
        Linux and Mac - use tty, termios, and sys modules
        
        
    # Example - try to get any input key from windows, then other os's
    """keypress - A module for detecting a single keypress"""
    
    try: 
        import msvcrt
        
        def getkey():
            """Wait for a keypress and return a single character string."""
            return msvcrt.getch()
            
    except ImportError:
        
        import sys, tty, termios
        
        def getkey():
            """Wait for a keypress and return a single character string."""
            fd = sys.stdin.fileno()
            original_attributes = termios.tcgetattr(fd)
            try:
                tty.setraw(sys.stdin.fileno())
                ch = sys.stdin.read(1)
            finally:
                termios.tcsetattr(fd, termios.TCPADRAIN, original_attributes)
            return ch
    


