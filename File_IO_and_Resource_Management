Opening Files

  open()
    # Takes many arguements but the most common are:
        File: the path to the file (required)
        Mode: Read, write, or append plus binary or text
        encoding: encoding to use in text mode
        
    Files are stored as binary
    Binary mode reflects the raw data in the file
    Text Mode encodes and decodes the binary contents with the default (or another if you specify) encoding 
        by default, universal newlines are used
        the default encoding is utf-8
        
    write()         # this is encode
    read()          # this is decode
    
    import sys
    sys.getdefaultencoding()                    # this isn't always the same on different systems, make sure you're confirming the encoding is what you think it is
    
    # Documentation for encoding support: docs.python.org/3/library/codecs.html#standard-encodings

Writing Text

  python 
  f = open('wasteland.txt', mode='wt', encoding='utf-8')        # w is for write and t is for text 
  
      # Note that there are 3 modes, read (r), write (w), and append(a)
      # for each of these there are selectors, binary(b) or text(t)
      
  open() returns a file like object
  help() works on modules, methods and types
  and it works on instances too! - remember, everything is an object!
  
  help(f)                                                       # note that we can write to the file
  
  f.write('What are the roots that clutch, ')
  f.write('what branches grow\n')
  f.write('Out of this stony rubbish? ')
  f.close()                                                     # At this point the file is closed and the contents are available to the rest of the system, you can verify by accessing this new file you created, its in the working dir
  

Reading Text

  g = open('wasteland.txt', mode='rt', encoding='utf-8')
  g.read(32)                                                    # reads the number of characters, not bytes
  g.read()                                                      # reads the entire file contents
  g.read()                                                      # since it has been fully read it returns nothing
  g.seek(0)                                                     # now the read can start over
  
  # there are easier ways to read files than using read
  g.readline()                                                  # read the first line
  g.readline()                                                  # read the second line
  g.readline()                                                  # this returns an empty string
  g.seek(0)                                                     # return to the beginnning of the line
  g.readlines()                                                 # reads all lines in a file, ensure you have enough memory for this
  g.close()                                                     # close the file once done with it
  
Appending Text

  h = open('wasteland.txt', mode='at', encoding='utf-8')      # 'a' for append
  
  h.writelines(                                               # there is no 'write' supported but there is 'writelines'
      ['Son of man, \n',
        'You cannot say, or guess, ',
        'for you know only, \n',
        'A heap of broken images, ',
        'where the sun beats \n'])
  h.close()

Iterating over Files

    # create files.py in editor
    
    import sys
    
    f = open(sys.argv[1], mode='rt', encoding='utf-8')
    for line in f:
        print(line)
    f.close()
    
    # In repl
    
    python files.py wasteland.txt
    
    # note the extra line added because of the print function, to get rid of this, modify the code to use sys.stdout.write(line)
    
    f = open(sys.argv[1], mode='rt', encoding='utf-8')
    for line in f:
        sys.stdout.write(line)
    f.close()

    # Again, test in the repl
    
    python files.py wasteland.txt

Closing Files with Finally

    The Recaman Sequence - this is only to generate data for this example
    
        import sys
        from itertools import count, islice
        
        def sequence():
            """Generate Recaman's sequence."""
            seen = set()
            a = 0
            for n in count(1):
            yield a
            seen.add(a)
            c = a - n
            if c < 0 or c in seen:
                c = a + n
            a = c
            
        def write_sequence(filename, num):
            """Write Recaman's sequence to a text file."""
            f = open(filename, mode='wt', encoding='utf-8')
            f.writelines(f"{r}\n"
                         for r in islice(sequence(), num = 1))
             f.close()
         
    # In the REPL
    
    python recaman.py recaman.dat 1000                      # calls the script to write 1000 lines to recaman.dat

    # Now lets create a script to import everything back into the repl once it has been generated
    
    Sequence Reader
    
    """Read and print an integer series."""
    import sys
    
    def read_series(filename):
        f = open(filename, mode='rt', encoding='utf-8')
        series = []
        for line in f:
            a = int(line.strip())
            series.append(a)
        f.close()
        return series
        
    # In repl
    
    python series.py recaman.dat
    
    # Now lets break it by adding a string to the table
        
    echo "oops" >> recaman.dat
    python series.py recaman.dat                    # now this will raise a value error stacktrace - the close call was never executed either since it didn't complete
    
    # The fix
    
    def read_series(filename):
        try:
            f = open(filename, mode='rt', encoding='utf-8')
            series = []
            for line in f:
                a = int(line.strip())
                series.append(a)
        finally:
            f.close()
        return series
        
    def main(filename):
        series = read_series(filename)
        print(series)
        
    # Replace the for loop with a line strip
    
    def read_series(filename):
        try:
            f = open(filename, mode='rt', encoding='utf-8')
            return [int(line.strip()) for line in f]                    # like so
        finally:                                                        # no matter what, the finally block will be called and will properly close the loop
            f.close()

With-blocks

    File usage pattern
    
    f = open(..)
    # work with file
    f.close()                                                           # if you don't close the file, then you can lose data!
    
    with-block
        Control flow structure for managing resources
        Can be used with any objects - such as files - which support the context-manager protocol
        
    Using with in read_series()                                         # by doing this, the read series automatically closes the file
    
        def read_series(filename):
            with open(filename, mode='rt', encoding='utf-8') as f:
                return [int(line.strip()) for line in f]
                
    # modding the recamon series to run this way
    
        def write_sequence(file, num):
            """ Write Recaman's sequence to a text file """
            with open(filename, mode='wt', encoding='utf-8') as f:
                f.writelines(f"{r}\n"
                             for r in islice(sequence(), num + 1))
 
Binary Files
   
   # BMP Writer
   """A module for dealing with BMP bitmap image files."""
   
   def write_grayscale(filename, pixels):
       """Creates and writes a grayscale BMP file.
       
       Args:
            filename: The name of the BMP file to be created
            
            pixels: A rectangular image stored as a sequence of rows. 
                Each row must be an iterable series of integers in the
                the range 0-255.
        
        Raises:
            ValueError: If any of the integer values are out of range.
            OSError: If the file couldn't be written
        """
        height = len(pixels)
        width = len(pixels[0])
        
        with open(filename, 'wb') as bmp:
            # BMP Header
            bmp.write(b'BM')
            
            size_bookmark = bmp.tell()      # The next four byes hold the filesize as a 32-bit 
            bmp.write(b'\x00\x00\x00\x00')  # Little-endian integer. Zero placeholder for now.
            
            bmp.write(b'\x00\x00')          # Unused 16-bit integer - should be zero    
            bmp.write(b'\x00\x00')          # Unused 16-bit integer - should be zero    
            
            pixel_offset_bookmark = bmp.tell()      # The next four bytes hold the integer offset to the 
            bmp.write(b'\x00\x00\x00\x00')          # pixel data. Zero placeholder for now
            
            # Image Header
            bmp.write(b'\x28\x00\x00\x00')          # Image header size in bytes - 40 decimal
            bmp.write(_int32_to_bytes(width))       # Image width in pixels
            bmp.write(_int32_to_bytes(height))      # Image height in pixels
            bmp.write(b'\x01\x00')                  # Number of image planes
            bmp.write(b'\x08\x00')                  # Bits per pixel 8 in grayscale
            bmp.write(b'\x00\x00\x00\x00')          # No compression
            bmp.write(b'\x00\x00\x00\x00')          # Zero for uncompessed images
            bmp.write(b'\x00\x00\x00\x00')          # Unused pixels per meter
            bmp.write(b'\x00\x00\x00\x00')          # Unused pixels per meter
            bmp.write(b'\x00\x00\x00\x00')          # Use whole color table
            bmp.write(b'\x00\x00\x00\x00')          # All colors are important
            
            # Color palette - a linear grayscale
            for c in range(256):
                bmp.write(bytes((c, c, c, 0)))      # Blue, Green, Red, Zero
                
            # Pixel Data
            pixel_data_bookmark = bmp.tell()
            for row in reversed(pixels):             # We need to flip this because bmp images are written bottom to top
                row_data = bytes(row)
                bmp.write(row_data)
                padding = b'\x00' * ((4 - (len(row) % 4)) % 4) # Pad row to multiple of four bytes
                bmp.write(padding)
                
            # End of file
            eof_bookmark = bmp.tell()
            
            # Fill in file size placeholder
            bmp.seek(size_bookmark)
            bmp.write(_int32_to_bytes(eof_bookmark))
            
            # Fill in pixel offset placeholder
            bmp.seek(pixel_offset_bookmark))
  
Bitwise Operators

    def _int32_to_bytes(i):
        """Convert an integer to four bytes in little-endian format. """
        # &: Bitwise-and                                                       
        # >>: Right-shift
        return bytes((i & 0xff,
                      i >> 8 & 0xff,                    # shifts 1 byte to right, then uses bitwise-and
                      i >> 16 & 0xff,                   # shifts 2 bytes to right, then uses bitwise-and
                      i >> 24 & 0xff))                  # shifts 3 bytes to the right, then uses bitwise-and
                      
      # Essentially this code will create a 4 byte tuple and return the sequence

Pixel Data

    # Create this fractal.py file
    
    """Computing Mandelbrot sets."""
    
    import math
    
    def mandel(real, imag):
        """The logarithm of number of iterations needed 
        to determine wheter a complex point is in the 
        Mandelbrot set.
        
        Args:
            real: The real coordinate
            imag: The imaginary coordinate
            
        Returns:
            An integer in the range 1-255.
        """
        
        x = 0
        y = 0
        for i in range(1,257):
            if x*x + y*y > 4.0:
                break
            xt = real + x*x - y*y
            y = imag + 2.0 * x * y
            x = xt
        return int(math.log(i) * 256 / math.log(256)) - 1
        
    def mandelbrot(size_x, size_y):
        """Make an Mandelbrot set image.
        
        Args:
            size_x: Image width
            size_y: Image height
            
        Returns:
            A list of lists of integers in the range 0-255.
        """
        
        return [[mandel((3.5 * x / size_x) - 2.5,
                        (2.0 * y / size_y) - 1.0)
                for x in range(size_x)]
                for y in range(size_y)]
        
    # In REPL
    
    import fractal
    pixels = fractal.mandelbrot(488, 256)
    import reprlib
    reprlib.repr(pixels)
    import bmp
    bmp.write_grayscale("mandel.bmp", pixels)

Reading Binary Data

    def diminsions(filename):
        """Determine the dimensions in pixels of a BMP image.
        
        Args:   
            filename: The filename of a BMP file
        
        Returns:
            A tuple containing two integers with the width and height in pixels
            
        Raises:
            ValueError: If the file was not a BMP file.
            OSError: If there was a problem reading the file.
            
        with open(filename, 'rb') as f:
            magic = r.read(2)
            if magic != b'BM'
                raise ValueError("{} is not a BMP file".format(filename))
                
            f.seek(18)
            width_bytes = f.read(4)
            height_bytes = r.read(4)
            
            return (_bytes_to_int32(width_bytes),
                    _bytes_to_int32(height_bytes))
                    
    def _bytes_to_int32(b):
        "Convert a bytes object containing four bytes into an integer."
        return b[0] | (b[1] << 8 | (b[2] << 16) | (b[3] << 24)
        
    # In the repl
    
    import bmp
    bmp.dimensions("mandel.bmp")
       
File-like Objects

    File-like objects
        Object that behave like files
        A semi-formal protocol
        File behaviors are too varied for a fully-specified protocol
        Use an EAFP approach with file-like objects when necessary
        
        
    def_words_per_line(flo):
        return [len(line.split()) for line in flo.readlines()]
        
    with open("wasteland.txt", mode='rt', encoding='utf-8') as real_file:
        wpl = words_per_line(real_file)
        
    wpl                                                                                 # this will print a tuple out
    type(real_file)                                                                     # this will show as a textiowrapper class 
    
    # in the repl
    from urllib.request import urlopen
    with urlopen("http://sixty-north.com/c/t.txt") as web_file:
        wpl = words_per_line(web_file)
        
    wpl                                                                                  # Prints the words per line    
    type(web_file)                                                                       # note this type is an HTTPResponse, quite different indeed - this is why we want to use duck typing 

Context Managers

    """Demonstrate raiding a referigerator."""
    
    class RefrigeratorRaider:                                   # A class for raiding the fridge
        """Raid a refrigerator"""
        
        def open(self):                                         # Opening the door
            print("Open fridge door.")
        
        def take(self, food):                                   # Take some food
            print(f"Finding {food}...")
            if food == 'deep fried pizza':
                raise RuntimeError("Health warning!")
            print(f"Taking {food}")
            
        def close(self):                                        # Close the refrigerator door
            print("Close fridge door.")
            
    def raid)food):                                             # Raid some food
        r = RefrigeratorRaider()
        r.open()
        r.take(food)
        r.close
        
        
    # In REPL
    
    from fridge import raid
    raid('bacon')
    raid('deep fried pizza')                                    # note this will throw the value error we defined. Because of this the file won't close properly. we can fix this with the modified code below
    
    # Modify the raider with the code below
    
    from contextlib import closing
    
    def raid(food):
        with closing(RefrigeratorRaider()) as r:
            r.open()
            r.take(food)
            # removed explicit call to close()                  # this prints the close call from ever being called thus there are no duplicates 
            
    # Back in the REPL
    
    from fridge import raid
    raid('deep fried pizza')                                    # Now that the health warning is triggered the files closes properly
        
    
    
    
    
