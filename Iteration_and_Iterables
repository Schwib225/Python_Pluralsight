List and Set Comprehensions

  Comprehensions
    
    Concise syntax for describing lists, sets, and dictionaries
    Readable and expressive
    Close to natural language
    
  words = "Why sometimes I have believed as many as six impossible things before breakfast".split()
  [len(word) for word in words]
  
  List Comprehensions Syntax
  
    [expression(item) for item in iterable]
    
    Equivalent Syntax
    
    lengths = []
    for word in words:
      lengths.append(len(word))
    lengths
  
  from math import factorial
  f = [len(str(factorial(x))) for x in range(20)]               # note the []
  f
  type(f)                                                       # this is just a list
  
  Set Comphrehensions
  
    from math import factorial
    s = {len(str(factorial(x))) for x in range (20)}            # note the {}
    type(s)                                                     # this is a set, since it is unique it will remove all duplicates for us
    
Dict Comprehensions

    { 
        key_expr(item): value_expr(item)
        for item in iterable
    }

    # here is a common use for dict comprehensions, flipping the key/value pair
    
    country_to_capital = { 'United Kingdom': 'London',
                            'Brazil': 'Brasilia',
                            'Morocco': 'Rabat',
                            'Sweden': 'Stockholm' }
                            
    capital_to_country = {capital: country for country, capital in country_to_capital.items()}          # use the dict.items() to get the keys and values from dict sources
    from pprint import pprint as pp
    pp(capital_to_country)
    
    1. Comprehension expressions can be arbitrarily complex
    2. Avoid excessive complexity
    3. Put complex expressions in separate functions for readability
    
    
    Complex Expressions

        import os, glob
        file_sizes = {os.path.realpath(p): os.stat(p).st_size for p in glob.glob('*.py')}
        pp file_sizes
    
Filtering Comprehensions

    # Supported by all 3 types of comprehensions
    
    from math import sqrt
    def is_prime(x):
        if x < 2:
            return False
        for i in range(2, int(sqrt(x)) + 1):
            if x % i == 0:
                return False
        return True
            
    {x for x in range(101) if is_prime(x)]
    
    # Another example
    
    prime_square_divisors = {x*x: (1, x, x*x) for x in range(20) if is_prime(x)}

Iteration Protocols

    iterable - Canbe passed to iter() to produce an iterator
    iterator - can be passed to next() to get the next value in the sequence
    
    # In the repl
    
    iterable = ['Spring', 'Summer', 'Autumn',  'Winter']
    iterator = iter(iterable)
    next(iterator)          # spring
    next(iterator)          # summer
    next(iterator)          # autumn
    next(iterator)          # winter
    
    # if we try this again (past the length of the list) we will get a StopIteration Exception

    Stopping Iteration with an Exception
        
        1. A single end - Sequences onlly have one ending, after all, so reaching it is exceptional
        2. Infinite sequences - Finding the end of an infinite sequence would be truely exceptional
        
    Iteration Protocols
    
        def first(iterable):
            iterator = iter(iterable)
            try:
                return next(iterator)
            except StopIteration:
                raise ValueError("iterable is empty")
        
        first(["1st", "2nd", "3rd"])                # goes through 1st value
        first(["1st", "2nd", "3rd"])                # goes through 2nd value
        first(set())                                # this will throw the value error

Generator Functions

    Iterables defined by functions
    Lazy Evaluation
    Can model sequences with no definite end
    Composable into pipelines
    
    yield
        
        Generator functions must include at least one yield statement
        They may also include return statements
    
    Generator Functions
    
        def gen123():
            yield 1
            yield 2
            yield 3
            
        g = gent123()
        g                   # not ethe generator object 
        
        next(g)             # 1    
        next(g)             # 2      
        next(g)             # 3
        next(g)             # StopIteration value  
        
        h = gen123()
        i = gen123()        # note both h and i are independent objects and can be interated independently
        h is i
        next(h)
        next(h)
        next(i)
        
        # Another example
        
        def gen246():
            print("About to yield 2")
            yield 2
            print("About to yield 4")
            yield 4
            print("About to yield 6")
            yield 6
            print("About to return")
        
        g = gen246()
        next(g)             # note it runs all code up to yield 2
        next(g)             # same for 4
        next(g)             # same for 6
        next(g)

Maintaining State in Generators
    
    continue 
        
        Finishes the current loop iteration and begin the next iteration immediately 
        
    # Use a graphical debugger for this, in the example he used pycharm
    
    # Here is the code
    
        def take(count, iterable):
            counter = 0 
            for item in interable:
                if counter == count:
                    return
                counter += 1
                yield item
                
        def distinct(iterable):
            seen = set()
            for item in iterable:
                if item in seen:
                    continue
                yield item
                seen.add(item)
        
        def run_pipeline():
            items = [ 3, 6, 6, 2, 1, 1]
            for item in take(3, list(distinct(items))):
                print(item)
        
        run_pipeline()
    

Laziness and the Infinite

    Generators only do enough work to produce requested data
    This allows generator to model infinite or just very large dsequences 
    Examples of such sequences are:
        Sensor readings
        Mathematical sequences
        Contents of large files
    
    def lucas():
        yield 2
        a = 2
        b = 1
        while True: 
            yield b
            a, b = b, a + b
            
    for x in lucas():
        print(x)

        

Generator Expressions

    Combo of Comprehensions and Generator functions
    
    Generator Expression Syntax
        
        (expr(item) for item in iterable)                   # note very similar to list comprehensions, but uses () instead of []
        
    million_seuqares (x*x for x in range(1, 1000001))
    million_squares
    list(mission_)squares)[-10:]
    
    # Note - Generators are single use objects
    To recreate a generator from a generator expression, you must execute the expression again
    
    sum(x*x for x in range(1, 1000001))                     # See how quickly that goes? normally if we didnt use the genrator this could take up to 400mb of memory to calculate
    
    sum(x for x in range(1001) if is_prime(x))              # we can see here how to run another generator expression based on the previous is_prime function we defined

Iteration Tools

    Python provides a powerful vocabulary for working with iterators
    These include the familiar enumerate() and sum() built in functions
    The itertools module provides many more 
    
    itertools.islice()
    itertools.count()
    
    # Solving the first 1000 primes problem

    from itertools import islice, count
    thousand_primes = islice((x for x in count() if is_prime(x)), 1000)
    thousand_primes                                                                 # note the object type here
    list(thousand_primes)[-10:]
    
    sum(islice((x for x in count() if is_prime(x)), 1000))                          # this will add all 1000 primes together
            
    Boolean Aggregation
    
    any() - Determines if any elements in a series are true
    all() - Determines if all elements in a series are true
    
    any([False, False, True])   - True, one of them is True
    all([False, False, True])   - False, they arent all true
    
    any(is_prime(x) for x in range(1328, 1361))
    all(name == name.title() for name in ['London', 'Paris', 'Tokyo', 'New York', 'Sydney', Kuala Lumpur'])     # checks that all names are capitalized (title()) and this is true
  
    zip() - Synchronize iteration across two or more iterables
    
    sunday = [12 ,14, 15, 15, 17, 21, 22, 22, 23, 22, 20, 18]
    monday = [13, 14, 14, 14, 16,20, 21, 22, 22, 21, 19, 17]
    for item in zip(sunday, monday):
        print(item)                             # note the tuple it provides
        
    # use tuple unpacking in the for loop
    for sun, mon in zip(sunday, monday):
        print("average =", (sun, mon) / 2)
        
    tuesday = [ 2, 2, 3, 7, 9, 10, 11, 12, 10, 9, 8, 8]
    for temps in zip(sunday, monday, tuesday):
        print(f"min = {min(temps):4.1f}, max={max(temps):4.1f}, average={sum(temps) / len(temps):4.1f}")
        
    # now lets check if everything is above freezing without duplicating memory usage
    from itertools import chain
    temperatures = chain(sunday, monday, tuesday)
    all(t > 0 for t in temperatures)
    
    for x in (p for p in lucas() if is_prime(p)):
        print(x)
        
    # Spend some time in the itertools module to see what it has and use cases
  
